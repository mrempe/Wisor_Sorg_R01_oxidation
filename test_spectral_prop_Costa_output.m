% script to test spectral properties of the output of the Costa model
%
%  First, load the "data" (the output of the model)
% this was generated by running his code (mex + .m files)
load('other_models_code\Costa_etal_2016\Figures\Data\Timeseries_FULL.mat', 'time','Vp','C_E','C_G','C_A')


dt = 0.01;  % seconds 
% Then, compute the power in various frequency bands
epoch_length = 10;   % in seconds
freq    	 = 1/dt; % in Hz
N            = fix(freq*epoch_length);  % number of data points in each epoch
raw_EEG = Vp;
raw_EEG_truncated = raw_EEG(1:N*floor(numel(raw_EEG)/N));
raw_EEG_reshaped  = reshape(raw_EEG_truncated,N,length(raw_EEG_truncated)/N);
[spectra_new,freqs_new] = pwelch(raw_EEG_reshaped,hamming(floor(N/2)),[],[],freq);
		
deltaIdx    = (freqs_new>=1  & freqs_new<=4);		%find the indices first
thetaIdx    = (freqs_new>=5  & freqs_new<=9);
gammaIdx    = (freqs_new>=80 & freqs_new<=100);
alphaIdx    = (freqs_new>=8  & freqs_new<=15);
epoch = struct;

epoch.delta = sum(spectra_new(deltaIdx,:),1);   %creates a row vector of delta power in each epoch
epoch.theta = sum(spectra_new(thetaIdx,:),1);
epoch.gamma = sum(spectra_new(gammaIdx,:),1);
epoch.alpha = sum(spectra_new(alphaIdx,:),1);

time_epochs = linspace(0,24,length(epoch.delta));

figure 
plot(time_epochs,epoch.delta,time_epochs,epoch.theta,'g',time_epochs,epoch.gamma,'k',time_epochs,epoch.alpha,'r')
legend('Delta','Theta','Gamma','Alpha')
set(gcf,'Position',[500, 500, 1000, 400]);

% Next, find all epochs of each state and make a periodogram of power for each

% C_E = decimate(C_E, 1000,'fir'); %#ok<*NODEF>
% C_G = decimate(C_G, 1000,'fir');
% C_A = decimate(C_A, 1000,'fir');
% time= decimate(time, 1000,'fir');


Hypnogram          = -1*ones(length(C_E),1);  % Wake
Hypnogram(C_E<0.4) = 3;             		  % NREM
Hypnogram(C_A>0.4) = 1;             		  % REM

W_indices = find(Hypnogram == -1);
S_indices = find(Hypnogram == 3);
R_indices = find(Hypnogram == 1);


% first make a periodogram of all the data, regardless of sleep state
figure
window = hamming(length(Vp));
[pxxAll,fxAll] = periodogram(Vp,window,length(Vp),freq,'power');
figure
semilogy(fxAll,pxxAll)
title('Costa output all states using periodogram')



figure
% SWS
wind = hamming(length(S_indices));
[pxxS,fxS] = periodogram(Vp(S_indices),wind,length(S_indices),freq,'power');
semilogy(fxS,pxxS,'r')
hold on 

% Wake
wind = hamming(length(W_indices));
%periodogram(Vp(W_indices),[],'twosided',50,freq)
[pxxW,fxW] = periodogram(Vp(W_indices),wind,length(W_indices),freq,'power');
plotW = semilogy(fxW,pxxW);
plotW.Color(4) = 0.2;


% REMS
wind = hamming(length(R_indices));
[pxxR,fxR] = periodogram(Vp(R_indices),wind,length(R_indices),freq,'power');
plotR=semilogy(fxR,pxxR,'g');
plotR.Color(4) = 0.2;  % transparency, sort of
legend('Wake','SWS','REMS')

% --- Using Pwelch instead of periodogram ---
[pxx,f] = pwelch(Vp,50,[],1024,freq);
figure
plot(f,10*log10(pxx))
xlabel('Frequency (Hz)')
ylabel('Power Spectral Density (dB/Hz)')
title('Experimental data all states using pwelch')

